// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Parse = require("date-fns/parse");
var Format = require("date-fns/format");
var SetDay = require("date-fns/setDay");
var AddDays = require("date-fns/addDays");
var IsAfter = require("date-fns/isAfter");
var SetDate = require("date-fns/setDate");
var SetYear = require("date-fns/setYear");
var SubDays = require("date-fns/subDays");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var AddHours = require("date-fns/addHours");
var AddWeeks = require("date-fns/addWeeks");
var AddYears = require("date-fns/addYears");
var IsBefore = require("date-fns/isBefore");
var SetHours = require("date-fns/setHours");
var SetMonth = require("date-fns/setMonth");
var SubHours = require("date-fns/subHours");
var SubWeeks = require("date-fns/subWeeks");
var SubYears = require("date-fns/subYears");
var AddMonths = require("date-fns/addMonths");
var ClosestTo = require("date-fns/closestTo");
var SetISODay = require("date-fns/setISODay");
var SubMonths = require("date-fns/subMonths");
var AddMinutes = require("date-fns/addMinutes");
var AddSeconds = require("date-fns/addSeconds");
var SetISOWeek = require("date-fns/setISOWeek");
var SetMinutes = require("date-fns/setMinutes");
var SetQuarter = require("date-fns/setQuarter");
var SetSeconds = require("date-fns/setSeconds");
var SubMinutes = require("date-fns/subMinutes");
var SubSeconds = require("date-fns/subSeconds");
var AddQuarters = require("date-fns/addQuarters");
var SubQuarters = require("date-fns/subQuarters");
var SetDayOfYear = require("date-fns/setDayOfYear");
var ClosestIndexTo = require("date-fns/closestIndexTo");
var FormatDistance = require("date-fns/formatDistance");
var SetISOWeekYear = require("date-fns/setISOWeekYear");
var AddBusinessDays = require("date-fns/addBusinessDays");
var AddISOWeekYears = require("date-fns/addISOWeekYears");
var AddMilliseconds = require("date-fns/addMilliseconds");
var SetMilliseconds = require("date-fns/setMilliseconds");
var SubISOWeekYears = require("date-fns/subISOWeekYears");
var SubMilliseconds = require("date-fns/subMilliseconds");
var IsWithinInterval = require("date-fns/isWithinInterval");
var FormatDistanceToNow = require("date-fns/formatDistanceToNow");
var FormatDistanceStrict = require("date-fns/formatDistanceStrict");

function flip(f, a, b) {
  return Curry._2(f, b, a);
}

var handleOptBool = Js_null_undefined.fromOption;

function timeUnitToString(param) {
  switch (param) {
    case 0 : 
        return "s";
    case 1 : 
        return "m";
    case 2 : 
        return "h";
    case 3 : 
        return "d";
    case 4 : 
        return "M";
    case 5 : 
        return "Y";
    
  }
}

function partialMethodToString(param) {
  switch (param) {
    case 0 : 
        return "floor";
    case 1 : 
        return "ceil";
    case 2 : 
        return "round";
    
  }
}

function closestIndexTo(param, param$1) {
  return ClosestIndexTo(param$1, param);
}

function closestTo(param, param$1) {
  return ClosestTo(param$1, param);
}

function formatDistance(includeSeconds, addSuffix, dateToCompare, date) {
  return FormatDistance(dateToCompare, date, {
              includeSeconds: Js_null_undefined.fromOption(includeSeconds),
              addSuffix: Js_null_undefined.fromOption(addSuffix)
            });
}

function formatDistanceStrict(addSuffix, unit, partialMethod, dateToCompare, date) {
  return FormatDistanceStrict(dateToCompare, date, {
              addSuffix: Js_null_undefined.fromOption(addSuffix),
              unit: Js_null_undefined.fromOption(Js_option.map(timeUnitToString, unit)),
              partialMethod: Js_null_undefined.fromOption(Js_option.map(partialMethodToString, partialMethod))
            });
}

function formatDistanceToNow(includeSeconds, addSuffix, date) {
  return FormatDistanceToNow(date, {
              includeSeconds: Js_null_undefined.fromOption(includeSeconds),
              addSuffix: Js_null_undefined.fromOption(addSuffix)
            });
}

function format(param, param$1) {
  return Format(param$1, param);
}

function isAfter(param, param$1) {
  return IsAfter(param$1, param);
}

function isBefore(param, param$1) {
  return IsBefore(param$1, param);
}

function $$parseFloat(additionalDigits, $$float) {
  return Parse($$float, {
              additionalDigits: Js_null_undefined.fromOption(additionalDigits)
            });
}

function parseString(additionalDigits, string) {
  return Parse(string, {
              additionalDigits: Js_null_undefined.fromOption(additionalDigits)
            });
}

function isWithinInterval(startDate, endDate, date) {
  return IsWithinInterval(date, startDate, endDate);
}

function setMilliseconds(param, param$1) {
  return SetMilliseconds(param$1, param);
}

function setSeconds(param, param$1) {
  return SetSeconds(param$1, param);
}

function setMinutes(param, param$1) {
  return SetMinutes(param$1, param);
}

function setHours(param, param$1) {
  return SetHours(param$1, param);
}

function setDay(param, param$1) {
  return SetDay(param$1, param);
}

function setISODay(param, param$1) {
  return SetISODay(param$1, param);
}

function setDate(param, param$1) {
  return SetDate(param$1, param);
}

function setDayOfYear(param, param$1) {
  return SetDayOfYear(param$1, param);
}

function setISOWeek(param, param$1) {
  return SetISOWeek(param$1, param);
}

function setMonth(param, param$1) {
  return SetMonth(param$1, param);
}

function setQuarter(param, param$1) {
  return SetQuarter(param$1, param);
}

function setYear(param, param$1) {
  return SetYear(param$1, param);
}

function setISOWeekYear(param, param$1) {
  return SetISOWeekYear(param$1, param);
}

function subMilliseconds(param, param$1) {
  return SubMilliseconds(param$1, param);
}

function subSeconds(param, param$1) {
  return SubSeconds(param$1, param);
}

function subMinutes(param, param$1) {
  return SubMinutes(param$1, param);
}

function subHours(param, param$1) {
  return SubHours(param$1, param);
}

function subDays(param, param$1) {
  return SubDays(param$1, param);
}

function subWeeks(param, param$1) {
  return SubWeeks(param$1, param);
}

function subMonths(param, param$1) {
  return SubMonths(param$1, param);
}

function subQuarters(param, param$1) {
  return SubQuarters(param$1, param);
}

function subYears(param, param$1) {
  return SubYears(param$1, param);
}

function subISOWeekYears(param, param$1) {
  return SubISOWeekYears(param$1, param);
}

function addBusinessDays(param, param$1) {
  return AddBusinessDays(param$1, param);
}

function addMilliseconds(param, param$1) {
  return AddMilliseconds(param$1, param);
}

function addSeconds(param, param$1) {
  return AddSeconds(param$1, param);
}

function addMinutes(param, param$1) {
  return AddMinutes(param$1, param);
}

function addHours(param, param$1) {
  return AddHours(param$1, param);
}

function addDays(param, param$1) {
  return AddDays(param$1, param);
}

function addWeeks(param, param$1) {
  return AddWeeks(param$1, param);
}

function addMonths(param, param$1) {
  return AddMonths(param$1, param);
}

function addQuarters(param, param$1) {
  return AddQuarters(param$1, param);
}

function addYears(param, param$1) {
  return AddYears(param$1, param);
}

function addISOWeekYears(param, param$1) {
  return AddISOWeekYears(param$1, param);
}

exports.flip = flip;
exports.handleOptBool = handleOptBool;
exports.timeUnitToString = timeUnitToString;
exports.partialMethodToString = partialMethodToString;
exports.closestIndexTo = closestIndexTo;
exports.closestTo = closestTo;
exports.formatDistance = formatDistance;
exports.formatDistanceStrict = formatDistanceStrict;
exports.formatDistanceToNow = formatDistanceToNow;
exports.format = format;
exports.isAfter = isAfter;
exports.isBefore = isBefore;
exports.$$parseFloat = $$parseFloat;
exports.parseString = parseString;
exports.isWithinInterval = isWithinInterval;
exports.setMilliseconds = setMilliseconds;
exports.setSeconds = setSeconds;
exports.setMinutes = setMinutes;
exports.setHours = setHours;
exports.setDay = setDay;
exports.setISODay = setISODay;
exports.setDate = setDate;
exports.setDayOfYear = setDayOfYear;
exports.setISOWeek = setISOWeek;
exports.setMonth = setMonth;
exports.setQuarter = setQuarter;
exports.setYear = setYear;
exports.setISOWeekYear = setISOWeekYear;
exports.subMilliseconds = subMilliseconds;
exports.subSeconds = subSeconds;
exports.subMinutes = subMinutes;
exports.subHours = subHours;
exports.subDays = subDays;
exports.subWeeks = subWeeks;
exports.subMonths = subMonths;
exports.subQuarters = subQuarters;
exports.subYears = subYears;
exports.subISOWeekYears = subISOWeekYears;
exports.addBusinessDays = addBusinessDays;
exports.addMilliseconds = addMilliseconds;
exports.addSeconds = addSeconds;
exports.addMinutes = addMinutes;
exports.addHours = addHours;
exports.addDays = addDays;
exports.addWeeks = addWeeks;
exports.addMonths = addMonths;
exports.addQuarters = addQuarters;
exports.addYears = addYears;
exports.addISOWeekYears = addISOWeekYears;
/* date-fns/parse Not a pure module */
